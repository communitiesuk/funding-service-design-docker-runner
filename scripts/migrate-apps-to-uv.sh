#!/bin/bash

set -e

for f in $(find apps -depth 1 -type d -exec realpath {} \;); do
  cd ${f}

  git checkout main
  git fetch
  git reset --hard origin/main

  # Leave utils alone for now
  if [ "$(basename $f)" == "funding-service-design-utils" ] || [ "$(basename $f)" == "digital-form-builder-adapter" ]; then
    continue
  fi

  git branch -D uv-requirements
  git checkout -b uv-requirements

  if grep '\[package\]' pyproject.toml; then  # pre-award stuff
    sed -i '' 's/\[package\]/\[project\]/g' pyproject.toml
  else  # post-award data-store
    echo "[project]
name = \"$(basename $(pwd))\"
version = \"0.1.0\"
" >> pyproject.new.toml
    cat pyproject.toml >> pyproject.new.toml
    mv pyproject.new.toml pyproject.toml
  fi

  if ! grep 'requires-python' pyproject.toml; then
    # Pull `.python-version` into `pyproject.toml`
    CURR_PYTHON_VERSION=$(cat .python-version)
    NEXT_PYTHON_VERSION="$(echo "$CURR_PYTHON_VERSION" | awk -F. '{print $1"."$2+1}')"
    awk -v curr_py_ver="${CURR_PYTHON_VERSION}" -v next_py_ver="${NEXT_PYTHON_VERSION}" '
BEGIN { in_project=0 }
/^\[project\]/ { print; in_project=1; next }
in_project && /^\[.*\]/ {
    print "requires-python = \">=" curr_py_ver ", <" next_py_ver "\""
    print ""
    in_project=0
}
{ print }
END {
    if (in_project) {
        print "requires-python = \">=" curr_py_ver ", <" next_py_ver "\""
        print ""
    }
}
' pyproject.toml > tmp && mv tmp pyproject.toml
  fi

  # Remove `-r requirements.txt` from `requirements-dev.in` because this confuses uv
  sed -i '' '/-r requirements.txt/d' requirements-dev.in
  sed -i '' '/-r requirements.in/d' requirements-dev.in

  # Temporarily copy `requirements.txt` to uv dependency constraints, so that it keeps the same version of
  # core (immediate+transitive) dependencies.
  REQFILE=requirements.txt
  if [ -f requirements-dev.txt ]; then REQFILE=requirements-dev.txt; fi
  cat ${REQFILE} | ag '==' | sed -E 's/(.*)/  "\1",/g' > constraint.txt
  echo -e '\n[tool.uv]\nconstraint-dependencies = [' >> pyproject.toml
  cat constraint.txt >> pyproject.toml
  echo ']' >> pyproject.toml

  uv add --requirements requirements.in
  uv add --dev --requirements requirements-dev.in
  uv sync
  uv lock
  rm requirements.in requirements-dev.in requirements-dev.txt constraint.txt

  # Remove the temporarily-pinned `constraint-dependencies` block from `[tool.uv]`
  sed -i '' '/^constraint-dependencies = \[/,/^]/d' pyproject.toml

  # Re-lock to remove the constraints from uv.lock
  uv lock

  git add .
  git commit -am 'Test moving requirements to uv

While also maintaining the existing pinned versions of requirements from requirements.txt

Patch autogenerated by funding-service-design-docker-runner/scripts/migrate-apps-to-uv.sh'

  if uv pip freeze | grep pip-tools; then
    uv remove --dev pip-tools
    git commit -am 'Remove pip-tools'
  fi

  EXPOSE_PORT=8080
  if [ $(basename "${f}") == "funding-service-design-post-award-data-store" ]; then
    RUN_COMMAND='CMD ["gunicorn", "--bind", "0.0.0.0:4001", "wsgi:app", "-c", "run/gunicorn/run.py"]'
    EXPOSE_PORT=4001
  elif [ -f build.py ]; then
    RUN_COMMAND='CMD ["flask", "run", "--host", "0.0.0.0", "--port", "8080"]'
  else
    RUN_COMMAND='CMD ["gunicorn", "--worker-class", "uvicorn.workers.UvicornWorker", "wsgi:app", "-b", "0.0.0.0:8080"]'
  fi

  echo "FROM python:$(cat .python-version)-bullseye

WORKDIR /app

COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \\
    --mount=type=bind,source=uv.lock,target=uv.lock \\
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \\
    uv sync --frozen --no-install-project

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
COPY . .
RUN --mount=type=cache,target=/root/.cache/uv \\
    uv sync --frozen

# Place executables in the environment at the front of the path
ENV PATH=\"/app/.venv/bin:\$PATH\"
EXPOSE ${EXPOSE_PORT}

${RUN_COMMAND}" > Dockerfile

  pre-commit run || true

  git commit -am 'Standardise Dockerfile for local dev'

  if [ $(basename "${f}") == "funding-service-design-authenticator" ]; then
    echo -e "\n\n  # newer versions of setuptools are deprecating some pkg_resources things; we will need to fix this sooner or later\n  ignore:.*pkg_resources.*:DeprecationWarning" >> pytest.ini
    git commit -am 'Ignore DeprecationWarnings from pkg_resources

These are caused by newer versions of setuptools, which openapi-spec-validator is not compatible with.

We should bump our dependencies in this app but I am leaving that for later, because it may include its own pain.'
  fi

  if [ $(basename "${f}") == "funding-service-design-post-award-data-store" ]; then
    echo -e "\n\n  # Try to bypass the very old invalid code in webassets: https://github.com/miracle2k/webassets/issues/531\n  ignore:.*invalid escape sequence.*:DeprecationWarning" >> pytest.ini
    git commit -am "Ignore invalid escape sequences from webassets

This lib is essentially unmaintained and isn't receiving updates for
newer Python version compatibility.

https://github.com/miracle2k/webassets

Last updated 3 years ago.

It contains some invalid escape sequences in the python code that throws
DeprecationWarnings in Python 3.11, which will become SyntaxWarnings or
SyntaxErrors in 3.12+. We need to find an alternative."
  fi

  git push origin $(git branch --show-current) --force-with-lease

#  gh pr create --web --title "Migrate app to use \`uv\` for dependencies"
done
