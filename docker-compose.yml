services:
  fund-store:
    build: 
      context: ../funding-service-design-fund-store
    command: bash -c "flask db upgrade && python -m debugpy --listen 0.0.0.0:5678 -m flask run -p 8080 -h 0.0.0.0"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:password@database:5432/fund_store
    ports: 
      - 3001:8080
      - 5681:5678
    depends_on: 
    - database
    volumes: ['../funding-service-design-fund-store:/app']
  application-store:
    build: 
      context: ../funding-service-design-application-store
    command: bash -c "flask db upgrade && python -m debugpy --listen 0.0.0.0:5678 -m flask run -p 8080 -h 0.0.0.0"
    environment:
      - FLASK_ENV=development
      - FUND_STORE_API_HOST=http://fund-store:8080
      - DATABASE_URL=postgresql://postgres:password@database:5432/application_store
      - ACCOUNT_STORE_API_HOST=http://account-store:8080
      - NOTIFICATION_SERVICE_HOST=http://notification:8080
      # Uncomment to test AWS locally once credentials are set in .env
      # You can grab these for dev with:
      #   cf t -s sandbox
      #   cf env funding-service-design-application-store-dev
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      # - AWS_REGION=${AWS_REGION}
    ports: 
      - 3002:8080
      - 5682:5678
    depends_on:
      - database
    volumes: ['../funding-service-design-application-store:/app']
  account-store:
      build: 
        context: ../funding-service-design-account-store
      command: bash -c "flask db upgrade && flask run -p 8080 -h 0.0.0.0"
      environment:
        - FLASK_ENV=development
        - DATABASE_URL=postgresql://postgres:password@database:5432/account_store
      volumes: ['../funding-service-design-account-store:/app']
      ports: 
        - 3003:8080
      depends_on:
        - database
  authenticator:
      build: 
        context: ../funding-service-design-authenticator
      volumes: ['../funding-service-design-authenticator:/app']
      command: bash -c "python -m debugpy --listen 0.0.0.0:5678 -m flask run -p 8080 -h 0.0.0.0"
      ports: 
        - 3004:8080
        - 5684:5678
      depends_on:
        - fund-store
        - account-store
        - notification
        - redis-data
      environment: 
        - REDIS_INSTANCE_URI=redis://redis-data:6379
        - ACCOUNT_STORE_API_HOST=http://account-store:8080
        - APPLICATION_STORE_API_HOST=http://application-store:8080
        - FUND_STORE_API_HOST=http://fund-store:8080
        - AUTHENTICATOR_HOST=http://localhost:3004
        - NOTIFICATION_SERVICE_HOST=http://notification:8080
        - APPLICANT_FRONTEND_HOST=http://localhost:3008
        - ASSESSMENT_FRONTEND_HOST=http://localhost:3010
        #  Uncomment to test Azure AD locally once credentials are set in .env
        # - AZURE_AD_CLIENT_ID=${AZURE_AD_CLIENT_ID}
        # - AZURE_AD_CLIENT_SECRET=${AZURE_AD_CLIENT_SECRET}
        # - AZURE_AD_TENANT_ID=${AZURE_AD_TENANT_ID}
  assessment-store:
      build: 
        context: ../funding-service-design-assessment-store
      volumes: ['../funding-service-design-assessment-store:/app']
      command: bash -c "flask db upgrade && flask run -p 8080 -h 0.0.0.0"
      ports: 
        - 3005:8080
      environment:
        - DATABASE_URL=postgresql://postgres:password@database:5432/assessment_store
        - APPLICATION_STORE_API_HOST=http://application-store:8080
      depends_on: 
        - database
  notification:
      build: 
        context: ../funding-service-design-notification
      volumes: ['../funding-service-design-notification:/app']
      ports:
        - 3006:8080
      environment:
        GOV_NOTIFY_API_KEY: ${GOV_NOTIFY_API_KEY:?err}
  frontend:
    build:
      context: ../funding-service-design-frontend
      dockerfile: Dockerfile
    volumes: ['../funding-service-design-frontend:/app']
    command: ["sh", "-c", "python -m debugpy --listen 0.0.0.0:5678 -m flask run --no-debugger --host 0.0.0.0 --port 8080"]   
    depends_on:
      - application-store
      - fund-store
      - form-runner
      - redis-data
    environment:
      - USE_LOCAL_DATA=False
      - APPLICATION_STORE_API_HOST=http://application-store:8080
      - FUND_STORE_API_HOST=http://fund-store:8080
      - FORMS_SERVICE_PUBLIC_HOST=http://localhost:3009
      - FORMS_SERVICE_PRIVATE_HOST=http://form-runner:3009
      - AUTHENTICATOR_HOST=http://localhost:3004
      - ACCOUNT_STORE_API_HOST=http://account-store:8080
      - FLASK_ENV=development
      - REDIS_INSTANCE_URI=redis://redis-data:6379
    ports:
      - 3008:8080
      - 5688:5678
  form-runner:
    build: 
      context: ../digital-form-builder
      dockerfile: ./fsd_config/Dockerfile
      args:
        # To use branch of digital-form-builder change 'latest' to an alternative tag from https://github.com/communitiesuk/digital-form-builder/pkgs/container/digital-form-builder-dluhc-runner/versions and run 'docker compose build form-runner'
        - BASE_IMAGE_TAG=latest
    ports: 
      - 3009:3009
    environment:
      - LOG_LEVEL=debug
      - JWT_AUTH_COOKIE_NAME=fsd_user_token
      - JWT_REDIRECT_TO_AUTHENTICATION_URL=http://localhost:3004/sessions/sign-out
      - RSA256_PUBLIC_KEY_BASE64="LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZU1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTUFEQ0JpQUtCZ0hHYnRGMXlWR1crckNBRk9JZGFrVVZ3Q2Z1dgp4SEUzOGxFL2kwS1dwTXdkU0haRkZMWW5IakJWT09oMTVFaWl6WXphNEZUSlRNdkwyRTRRckxwcVlqNktFNnR2CkhyaHlQL041ZnlwU3p0OHZDajlzcFo4KzBrRnVjVzl6eU1rUHVEaXNZdG1rV0dkeEJta2QzZ3RZcDNtT0k1M1YKVkRnS2J0b0lGVTNzSWs1TkFnTUJBQUU9Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ=="
      - 'NODE_CONFIG={"safelist": ["application-store"]}'
      - CONTACT_US_URL=http://localhost:3008/contact_us
      - COOKIE_POLICY_URL=http://localhost:3008/cookie_policy
      - ACCESSIBILITY_STATEMENT_URL=http://localhost:3008/accessibility_statement
      # Uncomment this to test file uploads once credentials are set in .env
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  redis-data:
    image: redis
    ports:
      - 6379:6379
  database:
      image: postgres
      volumes:
        - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
      restart: always
      environment:
        - POSTGRES_PASSWORD=password
        - POSTGRES_MULTIPLE_DATABASES=assessment_store,account_store,application_store,fund_store
      ports:
        - 5432:5432
  assessment:
    build: 
      context: ../funding-service-design-assessment
    volumes: ['../funding-service-design-assessment:/app']
    command: ['flask', 'run', '--host', '0.0.0.0', '--port', '8080']
    depends_on:
      - assessment-store
      - fund-store
      - account-store
      - redis-data
    environment:
      - FLASK_ENV=development
      - FUND_STORE_API_HOST=http://fund-store:8080
      - APPLICATION_STORE_API_HOST=http://application-store:8080
      - ASSESSMENT_STORE_API_HOST=http://assessment-store:8080
      - ACCOUNT_STORE_API_HOST=http://account-store:8080
      - AUTHENTICATOR_HOST=http://localhost:3004
      - REDIS_INSTANCE_URI=redis://redis-data:6379
      # Uncomment this to test file uploads once credentials are set in .env
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
    ports: 
      - 3010:8080
