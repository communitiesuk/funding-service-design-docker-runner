Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  # Customize your Aurora Serverless cluster by setting the default value of the following parameters.
  fsdselfserveclusterDBName:
    Type: String
    Description: The name of the initial database to be created in the Aurora Serverless v2 cluster.
    Default: fsd_self_serve
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints
Mappings:
  fsdselfserveclusterEnvScalingConfigurationMap:
    All:
      "DBMinCapacity": 0.5 # AllowedValues: from 0.5 through 128
      "DBMaxCapacity": 8   # AllowedValues: from 0.5 through 128
  BastionMap:
    dev:
      "SecurityGroup": "sg-0b6c7aabb95bf14a9"
    test:
      "SecurityGroup": "sg-0cf75a004dbade7b8"
    uat:
      "SecurityGroup": "sg-04017abfef2079894"
    prod:
      "SecurityGroup": "sg-08cecea8f9b8a4ec9"

Resources:
  fsdselfserveclusterDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora Serverless v2 cluster.
      SubnetIds:
        !Split [',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' }]
  fsdselfserveclusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your workload to access the Aurora Serverless v2 cluster fsdselfservecluster'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'The Security Group for ${Name} to access Aurora Serverless v2 cluster fsdselfservecluster.'
      VpcId:
        Fn::ImportValue:
          !Sub '${App}-${Env}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-${Name}-Aurora'
  fsdselfserveclusterDBClusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your Aurora Serverless v2 cluster fsdselfservecluster'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the Aurora Serverless v2 cluster.
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: !Sub 'From the Aurora Security Group of the workload ${Name}.'
          SourceSecurityGroupId: !Ref fsdselfserveclusterSecurityGroup
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: !Sub 'From the Bastion Security Group.'
          SourceSecurityGroupId: !FindInMap [BastionMap, !Ref Env, 'SecurityGroup']
      VpcId:
        Fn::ImportValue:
          !Sub '${App}-${Env}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-${Name}-Aurora'
  fsdselfserveclusterAuroraSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
  fsdselfserveclusterDBClusterParameterGroup:
    Metadata:
      'aws:copilot:description': 'A DB parameter group for engine configuration values'
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'aurora-postgresql14'
      Parameters:
        client_encoding: 'UTF8'
  fsdselfserveclusterDBCluster:
    Metadata:
      'aws:copilot:description': 'The fsdselfservecluster Aurora Serverless v2 database cluster'
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername:
        !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:username}}" ]]  # pragma: allowlist secret
      MasterUserPassword:
        !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:password}}" ]]  # pragma: allowlist secret
      DatabaseName: !Ref fsdselfserveclusterDBName
      Engine: 'aurora-postgresql'
      EngineVersion: '14.4'
      DBClusterParameterGroupName: !Ref fsdselfserveclusterDBClusterParameterGroup
      DBSubnetGroupName: !Ref fsdselfserveclusterDBSubnetGroup
      Port: 5432
      StorageEncrypted: true
      BackupRetentionPeriod: 8
      VpcSecurityGroupIds:
        - !Ref fsdselfserveclusterDBClusterSecurityGroup
      ServerlessV2ScalingConfiguration:
        # Replace "All" below with "!Ref Env" to set different autoscaling limits per environment.
        MinCapacity: !FindInMap [fsdselfserveclusterEnvScalingConfigurationMap, All, DBMinCapacity]
        MaxCapacity: !FindInMap [fsdselfserveclusterEnvScalingConfigurationMap, All, DBMaxCapacity]
  fsdselfserveclusterDBWriterInstance:
    Metadata:
      'aws:copilot:description': 'The fsdselfservecluster Aurora Serverless v2 writer instance'
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBClusterIdentifier: !Ref fsdselfserveclusterDBCluster
      DBInstanceClass: db.serverless
      Engine: 'aurora-postgresql'
      PromotionTier: 1
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region

  fsdselfserveclusterSecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref fsdselfserveclusterAuroraSecret
      TargetId: !Ref fsdselfserveclusterDBCluster
      TargetType: AWS::RDS::DBCluster

  FormRunnerFormUploadsBucketAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: S3FormUploadBucketActions
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:Describe*
              - s3:PutObject
              - s3:PutObjectACL
              - s3:DeleteObject
              - s3:ReplicateObject
            Resource:
              - Fn::ImportValue: !Sub ${App}-${Env}-FormUploadsBucketARN
              - !Sub
                - "${FullBucketARN}/*"
                - FullBucketARN:
                    Fn::ImportValue: !Sub "${App}-${Env}-FormUploadsBucketARN"

Outputs:
  DatabaseUrl:
    Description: "The URL of this database."
    Value:
      !Sub
      - "postgres://${USERNAME}:${PASSWORD}@${HOSTNAME}:${PORT}/${DBNAME}"
      - USERNAME: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:username}}" ]]  # pragma: allowlist secret
        PASSWORD: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:password}}" ]]  # pragma: allowlist secret
        HOSTNAME: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:host}}" ]]  # pragma: allowlist secret
        PORT: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:port}}" ]]  # pragma: allowlist secret
        DBNAME: !Join [ "",  [ '{{resolve:secretsmanager:', !Ref fsdselfserveclusterAuroraSecret, ":SecretString:dbname}}" ]]  # pragma: allowlist secret

  fsdselfserveclusterSecret: # injected as FSDselfserveCLUSTER_SECRET environment variable by Copilot.
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'port', 'dbname', 'username', 'password', 'dbClusterIdentifier' and 'engine'"
    Value: !Ref fsdselfserveclusterAuroraSecret
  fsdselfserveclusterSecurityGroup:
    Description: "The security group to attach to the workload."
    Value: !Ref fsdselfserveclusterSecurityGroup
  FormRunnerFormUploadsBucketAccessPolicyArn:
    Description: "The ARN of the ManagedPolicy to attach to the task role."
    Value: !Ref FormRunnerFormUploadsBucketAccessPolicy
